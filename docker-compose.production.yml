version: '3.8'\n\nservices:\n  # Frontend service with Nginx\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    container_name: sixty-sales-frontend\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"8080:8080\"  # Monitoring port\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./ssl:/etc/ssl/certs:ro\n      - ./logs/nginx:/var/log/nginx\n      - nginx-cache:/var/cache/nginx\n    networks:\n      - app-network\n    restart: unless-stopped\n    depends_on:\n      - api\n    healthcheck:\n      test: [\"CMD\", \"/usr/local/bin/health-check.sh\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '1.0'\n        reservations:\n          memory: 256M\n          cpus: '0.5'\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.frontend.rule=Host(`yourdomain.com`)\"\n      - \"traefik.http.routers.frontend.tls=true\"\n      - \"traefik.http.routers.frontend.tls.certresolver=letsencrypt\"\n\n  # API Backend service\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: api-backend\n    container_name: sixty-sales-api\n    ports:\n      - \"8000:8000\"\n    environment:\n      - NODE_ENV=production\n      - PORT=8000\n      - DATABASE_URL=${DATABASE_URL}\n      - SUPABASE_URL=${SUPABASE_URL}\n      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}\n      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}\n      - JWT_SECRET=${JWT_SECRET}\n      - REDIS_URL=${REDIS_URL}\n    volumes:\n      - ./logs/api:/app/logs\n      - api-uploads:/app/uploads\n    networks:\n      - app-network\n    restart: unless-stopped\n    depends_on:\n      - redis\n      - postgres\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/api/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '2.0'\n        reservations:\n          memory: 512M\n          cpus: '1.0'\n      replicas: 2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.api.rule=Host(`api.yourdomain.com`)\"\n      - \"traefik.http.routers.api.tls=true\"\n\n  # Redis for caching and session storage\n  redis:\n    image: redis:7.2-alpine\n    container_name: sixty-sales-redis\n    ports:\n      - \"6379:6379\"\n    command: >\n      redis-server\n      --appendonly yes\n      --appendfsync everysec\n      --maxmemory 256mb\n      --maxmemory-policy allkeys-lru\n      --tcp-keepalive 60\n      --timeout 300\n    volumes:\n      - redis-data:/data\n      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro\n    networks:\n      - app-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n\n  # PostgreSQL for local development/testing\n  postgres:\n    image: postgres:16-alpine\n    container_name: sixty-sales-postgres\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB:-sixty_sales}\n      - POSTGRES_USER=${POSTGRES_USER:-postgres}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_INITDB_ARGS=\"--auth-host=md5\"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - ./database/init:/docker-entrypoint-initdb.d:ro\n    networks:\n      - app-network\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sixty_sales}\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1.0'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n\n  # Monitoring with Prometheus\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: sixty-sales-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n      - prometheus-data:/prometheus\n    networks:\n      - app-network\n    restart: unless-stopped\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=15d'\n      - '--web.enable-lifecycle'\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n\n  # Grafana for visualization\n  grafana:\n    image: grafana/grafana:latest\n    container_name: sixty-sales-grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}\n      - GF_SERVER_ROOT_URL=https://monitoring.yourdomain.com\n      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro\n    networks:\n      - app-network\n    restart: unless-stopped\n    depends_on:\n      - prometheus\n    deploy:\n      resources:\n        limits:\n          memory: 256M\n          cpus: '0.5'\n\n  # Nginx Prometheus Exporter\n  nginx-exporter:\n    image: nginx/nginx-prometheus-exporter:latest\n    container_name: sixty-sales-nginx-exporter\n    ports:\n      - \"9113:9113\"\n    command:\n      - '-nginx.scrape-uri=http://frontend:8080/nginx_status'\n    networks:\n      - app-network\n    restart: unless-stopped\n    depends_on:\n      - frontend\n    deploy:\n      resources:\n        limits:\n          memory: 64M\n          cpus: '0.1'\n\n  # Log aggregation with Loki\n  loki:\n    image: grafana/loki:latest\n    container_name: sixty-sales-loki\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro\n      - loki-data:/loki\n    networks:\n      - app-network\n    restart: unless-stopped\n    command: -config.file=/etc/loki/local-config.yaml\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n\n  # Log shipping with Promtail\n  promtail:\n    image: grafana/promtail:latest\n    container_name: sixty-sales-promtail\n    volumes:\n      - ./logs:/var/log:ro\n      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro\n    networks:\n      - app-network\n    restart: unless-stopped\n    depends_on:\n      - loki\n    command: -config.file=/etc/promtail/config.yml\n    deploy:\n      resources:\n        limits:\n          memory: 128M\n          cpus: '0.1'\n\n  # Reverse proxy and SSL termination\n  traefik:\n    image: traefik:v3.0\n    container_name: sixty-sales-traefik\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"8081:8080\"  # Traefik dashboard\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./traefik:/etc/traefik:ro\n      - traefik-ssl:/ssl\n    networks:\n      - app-network\n    restart: unless-stopped\n    environment:\n      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}\n      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}\n    deploy:\n      resources:\n        limits:\n          memory: 256M\n          cpus: '0.5'\n\nnetworks:\n  app-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\nvolumes:\n  postgres-data:\n    driver: local\n  redis-data:\n    driver: local\n  nginx-cache:\n    driver: local\n  api-uploads:\n    driver: local\n  prometheus-data:\n    driver: local\n  grafana-data:\n    driver: local\n  loki-data:\n    driver: local\n  traefik-ssl:\n    driver: local"