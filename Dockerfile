# Multi-stage production-optimized Dockerfile for Sixty Sales Dashboard\n# Optimized for minimal size, security, and performance\n\n# Build stage\nFROM node:20-alpine AS builder\n\n# Security: Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\n# Set working directory\nWORKDIR /app\n\n# Install build dependencies with security updates\nRUN apk add --no-cache \\\n    libc6-compat \\\n    python3 \\\n    make \\\n    g++ \\\n    && rm -rf /var/cache/apk/*\n\n# Copy package files for optimal Docker layer caching\nCOPY package.json package-lock.json ./\n\n# Install dependencies with production optimizations\nRUN npm ci --only=production --omit=dev --ignore-scripts \\\n    && npm cache clean --force\n\n# Install dev dependencies for build\nRUN npm ci --include=dev\n\n# Copy source code\nCOPY . .\n\n# Build optimizations\nENV NODE_ENV=production\nENV VITE_BUILD_MODE=production\nENV GENERATE_SOURCEMAP=false\n\n# Build the application\nRUN npm run build:prod\n\n# Production stage - Nginx\nFROM nginx:1.25-alpine AS production\n\n# Security hardening\nRUN apk add --no-cache \\\n    curl \\\n    ca-certificates \\\n    && rm -rf /var/cache/apk/* \\\n    && addgroup -g 101 -S nginx \\\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx\n\n# Install Brotli module (if available)\nRUN apk add --no-cache nginx-mod-http-brotli || echo \"Brotli module not available\"\n\n# Copy custom nginx configuration\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Create cache directories with proper permissions\nRUN mkdir -p /var/cache/nginx/api /var/cache/nginx/static \\\n    && chown -R nginx:nginx /var/cache/nginx \\\n    && chmod -R 755 /var/cache/nginx\n\n# Copy built application from builder stage\nCOPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html\n\n# Create health check script\nRUN echo '#!/bin/sh' > /usr/local/bin/health-check.sh \\\n    && echo 'curl -f http://localhost/health || exit 1' >> /usr/local/bin/health-check.sh \\\n    && chmod +x /usr/local/bin/health-check.sh\n\n# Security: Remove default nginx configs\nRUN rm -rf /etc/nginx/conf.d/default.conf\n\n# Expose ports\nEXPOSE 80 443 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD /usr/local/bin/health-check.sh\n\n# Run as non-root user\nUSER nginx\n\n# Start nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# API Backend stage (optional)\nFROM node:20-alpine AS api-backend\n\n# Security: Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S backend -u 1001\n\n# Install security updates\nRUN apk add --no-cache \\\n    tini \\\n    curl \\\n    && rm -rf /var/cache/apk/*\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package.json package-lock.json ./\n\n# Install production dependencies only\nRUN npm ci --only=production --omit=dev --ignore-scripts \\\n    && npm cache clean --force\n\n# Copy backend source\nCOPY api/ ./api/\nCOPY server/ ./server/\n\n# Set production environment\nENV NODE_ENV=production\nENV PORT=8000\n\n# Create logs directory\nRUN mkdir -p /app/logs \\\n    && chown -R backend:nodejs /app \\\n    && chmod 755 /app/logs\n\n# Expose API port\nEXPOSE 8000\n\n# Health check for API\nHEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \\\n    CMD curl -f http://localhost:8000/api/health || exit 1\n\n# Run as non-root user\nUSER backend\n\n# Use tini for proper signal handling\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n\n# Start the API server\nCMD [\"node\", \"server/api-production.js\"]"