// Security Configuration for Production\n// Content Security Policy, CORS, and other security headers\n\nconst securityConfig = {\n  // Content Security Policy\n  csp: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      \n      // Scripts: Allow self and specific trusted domains\n      scriptSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\", // Required for Vite HMR in development\n        \"'unsafe-eval'\",   // Required for some build tools\n        \"https://supabase.yourdomain.com\",\n        \"https://cdn.yourdomain.com\",\n        // Analytics\n        \"https://www.google-analytics.com\",\n        \"https://www.googletagmanager.com\",\n        \"https://script.hotjar.com\",\n        \"https://static.hotjar.com\",\n      ],\n      \n      // Styles: Allow self and inline styles\n      styleSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\", // Required for CSS-in-JS libraries\n        \"https://fonts.googleapis.com\",\n        \"https://cdn.yourdomain.com\",\n      ],\n      \n      // Images: Allow self, data URLs, and CDN\n      imgSrc: [\n        \"'self'\",\n        \"data:\",\n        \"blob:\",\n        \"https:\", // Allow all HTTPS images for user uploads\n        \"https://cdn.yourdomain.com\",\n        \"https://assets.yourdomain.com\",\n      ],\n      \n      // Fonts: Allow self and Google Fonts\n      fontSrc: [\n        \"'self'\",\n        \"data:\",\n        \"https://fonts.gstatic.com\",\n        \"https://cdn.yourdomain.com\",\n      ],\n      \n      // Connections: API and WebSocket endpoints\n      connectSrc: [\n        \"'self'\",\n        \"https://supabase.yourdomain.com\",\n        \"wss://supabase.yourdomain.com\",\n        \"https://api.yourdomain.com\",\n        \"wss://api.yourdomain.com\",\n        // Analytics\n        \"https://www.google-analytics.com\",\n        \"https://analytics.google.com\",\n        \"https://in.hotjar.com\",\n        \"wss://ws.hotjar.com\",\n      ],\n      \n      // Media: Allow self for audio/video\n      mediaSrc: [\"'self'\"],\n      \n      // Objects: Disable for security\n      objectSrc: [\"'none'\"],\n      \n      // Frames: Restrict to self and trusted domains\n      frameSrc: [\n        \"'self'\",\n        \"https://js.stripe.com\", // If using Stripe\n      ],\n      \n      // Frame ancestors: Prevent clickjacking\n      frameAncestors: [\"'none'\"],\n      \n      // Base URI: Only allow self\n      baseUri: [\"'self'\"],\n      \n      // Form actions: Only allow self\n      formAction: [\"'self'\"],\n      \n      // Upgrade insecure requests\n      upgradeInsecureRequests: [],\n      \n      // Block mixed content\n      blockAllMixedContent: [],\n    },\n    \n    // Report violations\n    reportTo: 'csp-endpoint',\n    reportUri: '/api/csp-report',\n  },\n  \n  // CORS Configuration\n  cors: {\n    origin: function (origin, callback) {\n      const allowedOrigins = [\n        'https://yourdomain.com',\n        'https://www.yourdomain.com',\n        'https://staging.yourdomain.com',\n        'https://admin.yourdomain.com',\n      ];\n      \n      // Allow requests with no origin (mobile apps, curl, etc.)\n      if (!origin) return callback(null, true);\n      \n      if (allowedOrigins.indexOf(origin) !== -1) {\n        callback(null, true);\n      } else {\n        callback(new Error('Not allowed by CORS'));\n      }\n    },\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n    allowedHeaders: [\n      'Content-Type',\n      'Authorization',\n      'X-Requested-With',\n      'X-HTTP-Method-Override',\n      'Accept',\n      'Cache-Control',\n      'X-API-Key',\n    ],\n    exposedHeaders: [\n      'X-Total-Count',\n      'X-Page-Count',\n      'Link',\n      'X-RateLimit-Limit',\n      'X-RateLimit-Remaining',\n      'X-RateLimit-Reset',\n    ],\n    maxAge: 86400, // 24 hours\n  },\n  \n  // Security Headers\n  headers: {\n    // HTTP Strict Transport Security\n    'Strict-Transport-Security': 'max-age=63072000; includeSubDomains; preload',\n    \n    // Content Type Options\n    'X-Content-Type-Options': 'nosniff',\n    \n    // Frame Options\n    'X-Frame-Options': 'DENY',\n    \n    // XSS Protection\n    'X-XSS-Protection': '1; mode=block',\n    \n    // Referrer Policy\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    \n    // Permissions Policy\n    'Permissions-Policy': [\n      'camera=()', \n      'microphone=()', \n      'geolocation=()', \n      'payment=()',\n      'usb=()',\n      'magnetometer=()',\n      'accelerometer=()',\n      'gyroscope=()',\n    ].join(', '),\n    \n    // Cross-Origin Policies\n    'Cross-Origin-Opener-Policy': 'same-origin',\n    'Cross-Origin-Embedder-Policy': 'require-corp',\n    'Cross-Origin-Resource-Policy': 'same-site',\n    \n    // Cache Control for HTML\n    'Cache-Control': 'no-cache, no-store, must-revalidate',\n    \n    // Remove server information\n    'X-Powered-By': undefined, // Remove Express header\n    'Server': undefined,        // Remove server header\n  },\n  \n  // Rate Limiting Configuration\n  rateLimiting: {\n    // General API rate limiting\n    api: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 1000, // Limit each IP to 1000 requests per windowMs\n      message: {\n        error: 'Too many requests from this IP',\n        retryAfter: '15 minutes'\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skip: (req) => {\n        // Skip rate limiting for health checks\n        return req.path === '/health' || req.path === '/api/health';\n      },\n    },\n    \n    // Authentication endpoints (stricter)\n    auth: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 5, // Limit login attempts\n      message: {\n        error: 'Too many authentication attempts',\n        retryAfter: '15 minutes'\n      },\n      skipSuccessfulRequests: true,\n    },\n    \n    // Password reset (very strict)\n    passwordReset: {\n      windowMs: 60 * 60 * 1000, // 1 hour\n      max: 3, // Only 3 attempts per hour\n      message: {\n        error: 'Too many password reset attempts',\n        retryAfter: '1 hour'\n      },\n    },\n  },\n  \n  // Input Validation & Sanitization\n  validation: {\n    // Maximum request body size\n    bodyLimit: '10mb',\n    \n    // Parameter pollution prevention\n    parameterPollution: false,\n    \n    // URL length limit\n    urlLimit: 2048,\n    \n    // Field size limits\n    fieldSize: 1 * 1024 * 1024, // 1MB\n    \n    // File upload limits\n    fileSize: 5 * 1024 * 1024, // 5MB\n    files: 5, // Maximum 5 files\n    \n    // SQL Injection Protection\n    sqlInjection: {\n      enabled: true,\n      patterns: [\n        /('|(\\-\\-)|(;)|(\\||\\|)|(\\*|\\*))/i,\n        /(union|select|insert|delete|update|create|drop|exec|execute)/i,\n      ],\n    },\n    \n    // XSS Protection\n    xss: {\n      enabled: true,\n      allowedTags: ['b', 'i', 'em', 'strong', 'a'],\n      allowedAttributes: {\n        'a': ['href']\n      },\n    },\n  },\n  \n  // Session Security\n  session: {\n    secret: process.env.SESSION_SECRET,\n    name: 'sessionId', // Change default name\n    cookie: {\n      secure: true,        // HTTPS only\n      httpOnly: true,      // No client-side access\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'strict',  // CSRF protection\n    },\n    resave: false,\n    saveUninitialized: false,\n  },\n  \n  // API Security\n  api: {\n    // API versioning\n    versioning: true,\n    currentVersion: 'v1',\n    \n    // Request ID for tracking\n    requestId: true,\n    \n    // Request logging\n    logging: {\n      enabled: true,\n      excludePaths: ['/health', '/metrics'],\n      includeBody: false, // Don't log request bodies for security\n    },\n    \n    // Response compression\n    compression: {\n      enabled: true,\n      level: 6,\n      threshold: 1024,\n    },\n    \n    // Query complexity limiting (for GraphQL if used)\n    queryComplexity: {\n      maximumComplexity: 1000,\n      maximumDepth: 10,\n    },\n  },\n  \n  // Environment-specific overrides\n  environments: {\n    development: {\n      csp: {\n        directives: {\n          scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n          connectSrc: [\"'self'\", \"ws://localhost:*\", \"http://localhost:*\"],\n        },\n      },\n      headers: {\n        'Cache-Control': 'no-cache',\n      },\n    },\n    \n    staging: {\n      csp: {\n        reportOnly: true, // Report violations but don't block\n      },\n    },\n    \n    production: {\n      // Strictest settings for production\n      csp: {\n        reportOnly: false,\n      },\n      rateLimiting: {\n        api: {\n          max: 500, // Stricter in production\n        },\n      },\n    },\n  },\n};\n\n// Export configuration based on environment\nconst environment = process.env.NODE_ENV || 'development';\nconst config = {\n  ...securityConfig,\n  ...securityConfig.environments[environment],\n};\n\nmodule.exports = config;"